package net.darktree.sequensa.binding;

import com.sun.jna.Library;
import com.sun.jna.Pointer;

// Auto generated by bindgen.py 
public interface SequensaLibrary extends Library {

    /// Dummy function, it can be used to verify if the API is correctly loaded
    boolean seq_verify();

    /// Free Compiler object allocated using seq_compiler_new
    void seq_compiler_free( Pointer ptr );

    /// Create new Compiler object
    Pointer seq_compiler_new();

    /// Free program buffer
    void seq_compiler_build_free( Pointer ptr );

    /// Create and populate new program buffer
    Pointer seq_compiler_build_new( Pointer compiler, String str, Pointer size );

    /// Free Executor object allocated using seq_executor_new
    void seq_executor_free( Pointer ptr );

    /// Create new Executor object
    Pointer seq_executor_new();

    /// Execute given program
    void seq_executor_execute( Pointer executor, Pointer buffer, int size );

    /// Get pointer to the results stream
    Pointer seq_executor_results_stream_ptr( Pointer executor );

    /// Add native function to executor, not thread safe
    void seq_executor_add_native( Pointer executor, String name, Pointer funcptr );

    /// Get stream size
    int seq_stream_size( Pointer stream );

    /// Get generic from stream
    Pointer seq_stream_generic_ptr( Pointer stream, int index );

    /// Clear the stream
    void seq_stream_clear( Pointer stream );

    /// Append to stream
    void seq_stream_add( Pointer stream, Pointer generic );

    /// Get data type from generic
    int seq_generic_type( Pointer generic );

    /// Get anchor from generic
    int seq_generic_anchor( Pointer generic );

    /// Query long from number generic
    long seq_generic_number_long( Pointer generic );

    /// Query double from number generic
    double seq_generic_number_double( Pointer generic );

    /// Query string from string generic
    String seq_generic_string_string( Pointer generic );

    /// Query bool from string generic
    boolean seq_generic_bool_bool( Pointer generic );

    /// Create new generic number object
    Pointer seq_generic_number_create( boolean anchor, double value );

    /// Create new generic bool object
    Pointer seq_generic_bool_create( boolean anchor, boolean value );

    /// Create new generic string object
    Pointer seq_generic_string_create( boolean anchor, String value );

    /// Create new generic null object
    Pointer seq_generic_null_create( boolean anchor );

}
