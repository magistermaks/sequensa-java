package net.darktree.sequensa.binding;

import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Pointer;

// Auto generated by bindgen.py 
public interface SequensaLibrary extends Library {

    interface Native extends Callback {
        Pointer call( Pointer stream );
    }

    interface CompilerErrorHandle extends Callback {
        boolean call( Pointer error );
    }

    /// Dummy function, it can be used to verify if the API is correctly loaded
    int seq_verify();

    /// Generic free()
    void seq_free( Pointer ptr );

    /// Get major version component
    int seq_version_major();

    /// Get minor version component
    int seq_version_minor();

    /// Get path version component
    int seq_version_patch();

    /// Get standard name
    String seq_standard();

    /// Free Compiler object allocated using seq_compiler_new
    void seq_compiler_free( Pointer ptr );

    /// Create new Compiler object
    Pointer seq_compiler_new();

    /// Free program buffer
    void seq_compiler_build_free( Pointer ptr );

    /// Create and populate new program buffer
    Pointer seq_compiler_build_new( Pointer compiler, String str, Pointer size );

    /// created new buffer, it needs to be later freed
    Pointer seq_buffer_new( Pointer data, int size );

    /// Set compiler optimization flags
    void seq_compiler_optimizations( Pointer compiler, int flags );

    /// Set Compiler error handle
    void seq_compiler_error_handle( Pointer compiler, CompilerErrorHandle func );

    /// Query error message from any exception
    String seq_exception_message( Pointer exception );

    /// Query error level from compiler exception
    int seq_compiler_error_level( Pointer exception );

    /// Decompile given bytecode buffer
    Pointer seq_decompile( Pointer buffer, int size, String indentation, int base );

    /// Free Executor object allocated using seq_executor_new
    void seq_executor_free( Pointer ptr );

    /// Create new Executor object
    Pointer seq_executor_new();

    /// Execute given program
    void seq_executor_execute( Pointer executor, Pointer buffer, int size );

    /// Get pointer to the results stream
    Pointer seq_executor_results_stream_ptr( Pointer executor );

    /// Add native function to executor, not thread safe
    void seq_executor_add_native( Pointer executor, String name, Native func );

    /// Get stream size
    int seq_stream_size( Pointer stream );

    /// Get a new stream object, for use in native functions
    Pointer seq_stream_create();

    /// Free Stream object allocated using seq_stream_create
    void seq_stream_free( Pointer stream );

    /// Get generic from stream
    Pointer seq_stream_generic_ptr( Pointer stream, int index );

    /// Clear the stream
    void seq_stream_clear( Pointer stream );

    /// Append to stream
    void seq_stream_add( Pointer stream, Pointer generic );

    /// Get data type from generic
    int seq_generic_type( Pointer generic );

    /// Get anchor from generic
    int seq_generic_anchor( Pointer generic );

    /// Query long from number generic
    long seq_generic_number_long( Pointer generic );

    /// Query double from number generic
    double seq_generic_number_double( Pointer generic );

    /// Query string from string generic
    String seq_generic_string_string( Pointer generic );

    /// Query bool from string generic
    boolean seq_generic_bool_bool( Pointer generic );

    /// Create new generic number object
    Pointer seq_generic_number_create( boolean anchor, double value );

    /// Create new generic bool object
    Pointer seq_generic_bool_create( boolean anchor, boolean value );

    /// Create new generic string object
    Pointer seq_generic_string_create( boolean anchor, String value );

    /// Create new generic null object
    Pointer seq_generic_null_create( boolean anchor );

}
